name: "Build"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      # 3. Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          channel: 'stable'

      # 4. Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 5. Install lcov
      - name: Install lcov
        run: brew install lcov

      # 6. Run Tests
      - name: Run Tests
        id: test
        continue-on-error: true
        run: flutter test --coverage

      # 7. Check if coverage directory exists before uploading
      - name: Check Coverage Report
        run: |
          if [ ! -d "coverage/html" ]; then
            echo "Coverage report directory does not exist";
            exit 1;
          fi
          echo "Coverage report directory exists";

      # 8. Generate HTML Test Report
      - name: Generate HTML Test Report
        run: |
          genhtml coverage/lcov.info --output-directory coverage/html

      # 9. Upload Test Report Artifact
      - name: Upload Test Report Artifact
        if: always()  # Ensure this happens even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: Test Report  # Artifact name
          path: coverage/html/

  upload_test_report:
    name: Upload Test Report
    runs-on: ubuntu-latest
    needs: build  # This job will only run after the 'build' job is successful

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 1. Download Test Report Artifact
      - name: Download Test Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: Test Report  # Make sure this matches the artifact name from upload step
          path: coverage/html/

      # 2. Upload Test Report to Google Drive
      - name: Upload Test Report to Google Drive
        uses: adityak74/google-drive-upload-git-action@main
        with:
          credentials: ${{ secrets.CREDENTIALS }}
          filename: coverage/html/index.html
          folderId: ${{ secrets.FOLDERID }}
          overwrite: "true"

  build_artifacts:
    name: Build & Upload Artifacts
    runs-on: macos-latest
    if: success()  # Only run if the previous jobs succeed
    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set Up Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          channel: 'stable'

      # 3. Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 4. Build Debug APK and AAB
      - name: Build Debug APK and AAB
        run: |
          flutter build apk --debug
          flutter build appbundle --debug

      # 5. Build Debug IPA (iOS Build)
      - name: Build Debug IPA (iOS Build)
        run: flutter build ios --debug --no-codesign

      # 6. Compress Archives and IPAs
      - name: Compress Archives and IPAs
        run: |
          cd build
          tar -czf ios_build.tar.gz ios

      # 7. Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build Artifacts
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/bundle/debug/app-debug.aab
            build/ios_build.tar.gz

  upload_builds:
    name: Upload Builds to Google Drive
    runs-on: ubuntu-latest
    needs: build_artifacts  # Runs after the 'build_artifacts' job

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 1. Download Build Artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Build Artifacts
          path: build/

      # 2. Upload APK to Google Drive
      - name: Upload APK to Google Drive
        uses: adityak74/google-drive-upload-git-action@main
        with:
          credentials: ${{ secrets.CREDENTIALS }}
          filename: build/app/outputs/flutter-apk/app-debug.apk
          folderId: ${{ secrets.FOLDERID }}
          overwrite: "true"

      # 3. Upload AAB to Google Drive
      - name: Upload AAB to Google Drive
        uses: adityak74/google-drive-upload-git-action@main
        with:
          credentials: ${{ secrets.CREDENTIALS }}
          filename: build/app/outputs/bundle/debug/app-debug.aab
          folderId: ${{ secrets.FOLDERID }}
          overwrite: "true"

      # 4. Upload iOS Build to Google Drive
      - name: Upload iOS Build to Google Drive
        uses: adityak74/google-drive-upload-git-action@main
        with:
          credentials: ${{ secrets.CREDENTIALS }}
          filename: build/ios_build.tar.gz
          folderId: ${{ secrets.FOLDERID }}
          overwrite: "true"
